import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as glue from 'aws-cdk-lib/aws-glue';
import * as sfn from 'aws-cdk-lib/aws-stepfunctions';
import * as sfn_tasks from 'aws-cdk-lib/aws-stepfunctions-tasks';

export class AthenaGlueStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const athenaBucketName = this.node.tryGetContext('athenaBucket');
    const crawlerBucketName = this.node.tryGetContext('crawlerBucket');
    const databaseName = this.node.tryGetContext('databaseName');

    const athenaBucket = new s3.Bucket(this, 'AthenaQueryS3Bucket', {
      bucketName: athenaBucketName,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true
    });

    const crawlerBucket = new s3.Bucket(this, 'CrawlerS3Bucket', {
      bucketName: crawlerBucketName,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true
    });

    const myDatabase = new glue.CfnDatabase(this, 'MyDatabase', {
      catalogId: cdk.Aws.ACCOUNT_ID,
      databaseInput: {
        name: databaseName
      }
    });

    const myRole = new iam.Role(this, 'MyRole', {
      assumedBy: new iam.ServicePrincipal('glue.amazonaws.com'),
      managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSGlueServiceRole')]
    });

    myRole.addToPolicy(new iam.PolicyStatement({
      actions: ['s3:GetObject', 's3:PutObject'],
      resources: [crawlerBucket.bucketArn + '/*']
    }));

    const myCrawler = new glue.CfnCrawler(this, 'MyCrawler', {
      name: 'testcrawler',
      role: myRole.roleArn,
      databaseName: myDatabase.ref,
      targets: {
        s3Targets: [{ path: `${crawlerBucket.bucketName}/` }]
      }
    });

    const sfRole = new iam.Role(this, 'SFRole', {
      assumedBy: new iam.ServicePrincipal('states.amazonaws.com')
    });

    sfRole.addToPolicy(new iam.PolicyStatement({
      actions: [
        'athena:startQueryExecution',
        'athena:stopQueryExecution',
        'athena:getQueryExecution',
        'athena:getDataCatalog',
        'athena:getQueryResults'
      ],
      resources: ['*']
    }));

    sfRole.addToPolicy(new iam.PolicyStatement({
      actions: [
        's3:GetBucketLocation',
        's3:GetObject',
        's3:ListBucket',
        's3:ListBucketMultipartUploads',
        's3:ListMultipartUploadParts',
        's3:AbortMultipartUpload',
        's3:CreateBucket',
        's3:PutObject'
      ],
      resources: [
        athenaBucket.bucketArn,
        athenaBucket.bucketArn + '/*',
        crawlerBucket.bucketArn,
        crawlerBucket.bucketArn + '/*'
      ]
    }));

    sfRole.addToPolicy(new iam.PolicyStatement({
      actions: [
        'glue:*'
      ],
      resources: ['*']
    }));

    const definition = sfn.DefinitionBody.fromFile('athenaquery.asl.json');

    new sfn.CfnStateMachine(this, 'StateMachine', {
      roleArn: sfRole.roleArn,
      definitionString: definition.bind(this).value,
      stateMachineName: 'StateMachine'
    });
  }
}
