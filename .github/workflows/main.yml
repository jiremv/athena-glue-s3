import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as glue from 'aws-cdk-lib/aws-glue';
import * as sfn from 'aws-cdk-lib/aws-stepfunctions';

export class AthenaGlueS3Stack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const athenaBucket = new s3.Bucket(this, 'AthenaQueryS3Bucket', {
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
    });

    const crawlerBucket = new s3.Bucket(this, 'CrawlerS3Bucket', {
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
    });

    const myDatabase = new glue.CfnDatabase(this, 'MyDatabase', {
      catalogId: cdk.Aws.ACCOUNT_ID,
      databaseInput: {
        name: 'my_database',
      },
    });

    const myRole = new iam.Role(this, 'MyRole', {
      assumedBy: new iam.ServicePrincipal('glue.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSGlueServiceRole'),
      ],
    });

    myRole.addToPolicy(new iam.PolicyStatement({
      actions: ['s3:GetObject', 's3:PutObject'],
      resources: [crawlerBucket.bucketArn + '/*'],
    }));

    new glue.CfnCrawler(this, 'MyCrawler', {
      name: 'testcrawler',
      role: myRole.roleArn,
      databaseName: myDatabase.ref,
      targets: {
        s3Targets: [{ path: `${crawlerBucket.bucketArn}/` }],
      },
    });

    const sfRole = new iam.Role(this, 'SFRole', {
      assumedBy: new iam.ServicePrincipal('states.amazonaws.com'),
    });

    sfRole.addToPolicy(new iam.PolicyStatement({
      actions: [
        'athena:startQueryExecution',
        'athena:stopQueryExecution',
        'athena:getQueryExecution',
        'athena:getDataCatalog',
        'athena:getQueryResults',
      ],
      resources: ['*'],
    }));

    sfRole.addToPolicy(new iam.PolicyStatement({
      actions: [
        's3:GetBucketLocation',
        's3:GetObject',
        's3:ListBucket',
        's3:ListBucketMultipartUploads',
        's3:ListMultipartUploadParts',
        's3:AbortMultipartUpload',
        's3:CreateBucket',
        's3:PutObject',
      ],
      resources: [
        athenaBucket.bucketArn,
        athenaBucket.bucketArn + '/*',
        crawlerBucket.bucketArn,
        crawlerBucket.bucketArn + '/*',
      ],
    }));

    sfRole.addToPolicy(new iam.PolicyStatement({
      actions: [
        'glue:CreateDatabase',
        'glue:GetDatabase',
        'glue:GetDatabases',
        'glue:UpdateDatabase',
        'glue:DeleteDatabase',
        'glue:CreateTable',
        'glue:UpdateTable',
        'glue:GetTable',
        'glue:GetTables',
        'glue:DeleteTable',
        'glue:BatchDeleteTable',
        'glue:BatchCreatePartition',
        'glue:CreatePartition',
        'glue:UpdatePartition',
        'glue:GetPartition',
        'glue:GetPartitions',
        'glue:BatchGetPartition',
        'glue:DeletePartition',
        'glue:BatchDeletePartition',
      ],
      resources: ['*'],
    }));

    new sfn.CfnStateMachine(this, 'StateMachine', {
      roleArn: sfRole.roleArn,
      definitionString: JSON.stringify(require('../athenaquery.asl.json')),
      stateMachineName: 'StateMachine',
    });
  }
}
